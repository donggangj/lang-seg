from typing import Tuple, Optional

import torch
from torch import nn, Tensor
from torch.nn.init import constant_, xavier_normal_, xavier_uniform_
from torch.nn.modules.linear import NonDynamicallyQuantizableLinear
from torch.nn.parameter import Parameter
import torch.nn.functional as F


class LayerNorm(nn.Module):
    """
    From clip/model.py.

    ORIGINAL CODE:
    =====================================================

    class LayerNorm(nn.LayerNorm):

    def forward(self, x: torch.Tensor):
        orig_type = x.dtype
        ret = super().forward(x.type(torch.float32))
        return ret.type(orig_type)

    =====================================================


    Subclass torch's LayerNorm to handle fp16.
    """

    def __init__(self, *args, **kwargs):
        super(LayerNorm, self).__init__()

    def forward(self, x: torch.Tensor):
        orig_type = x.dtype
        ret = F.layer_norm(x.type(torch.float32), self.normalized_shape, self.weight, self.bias, self.eps)
        return ret.type(orig_type)


class CLIP(nn.Module):
    """
    From clip/model.py

    ORIGINAL CODE:
    =====================================================
    def forward(self, image, text):
        image_features = self.encode_image(image)
        text_features = self.encode_text(text)

        # normalized features
        image_features = image_features / image_features.norm(dim=1, keepdim=True)
        text_features = text_features / text_features.norm(dim=1, keepdim=True)

        # cosine similarity as logits
        logit_scale = self.logit_scale.exp()
        logits_per_image = logit_scale * image_features @ text_features.t()
        logits_per_text = logits_per_image.t()

        # shape = [global_batch_size, global_batch_size]
        return logits_per_image, logits_per_text
    =====================================================
    """

    def forward(self, image, text):
        image_features = self.encode_image(image)
        text_features = self.encode_text(text)

        # normalized features
        image_features = image_features / image_features.norm(p=2, dim=1, keepdim=True)
        text_features = text_features / text_features.norm(p=2, dim=1, keepdim=True)

        # cosine similarity as logits
        logit_scale = self.logit_scale.exp()
        logits_per_image = logit_scale * image_features @ text_features.t()
        logits_per_text = logits_per_image.t()

        # shape = [global_batch_size, global_batch_size]
        return logits_per_image, logits_per_text


class MultiheadAttentionCustom(nn.Module):
    """
    Add to clip/model.py
    """

    __constants__ = ['batch_first']
    bias_k: Optional[torch.Tensor]
    bias_v: Optional[torch.Tensor]

    def __init__(self, embed_dim, num_heads) -> None:
        factory_kwargs = {'device': None, 'dtype': None}
        super(MultiheadAttentionCustom, self).__init__()
        self.embed_dim = embed_dim
        self.kdim = embed_dim
        self.vdim = embed_dim
        self._qkv_same_embed_dim = True

        self.num_heads = num_heads
        self.dropout = 0.
        self.batch_first = False
        self.head_dim = embed_dim // num_heads

        self.in_proj_weight = Parameter(torch.empty((3 * embed_dim, embed_dim), **factory_kwargs))
        self.register_parameter('q_proj_weight', None)
        self.register_parameter('k_proj_weight', None)
        self.register_parameter('v_proj_weight', None)

        self.in_proj_bias = Parameter(torch.empty(3 * embed_dim, **factory_kwargs))
        self.out_proj = NonDynamicallyQuantizableLinear(embed_dim, embed_dim, bias=True, **factory_kwargs)

        self.bias_k = self.bias_v = None

        self.add_zero_attn = False

        self._reset_parameters()

    def _reset_parameters(self):
        xavier_uniform_(self.in_proj_weight)

        if self.in_proj_bias is not None:
            constant_(self.in_proj_bias, 0.)
            constant_(self.out_proj.bias, 0.)
        if self.bias_k is not None:
            xavier_normal_(self.bias_k)
        if self.bias_v is not None:
            xavier_normal_(self.bias_v)

    def __setstate__(self, state):
        # Support loading old MultiheadAttention checkpoints generated by v1.1.0
        if '_qkv_same_embed_dim' not in state:
            state['_qkv_same_embed_dim'] = True

        super(MultiheadAttentionCustom, self).__setstate__(state)

    def forward(self, query: Tensor, key: Tensor, value: Tensor) -> Tuple[Tensor, Optional[Tensor]]:

        attn_output, attn_output_weights = F.multi_head_attention_forward(
            query, key, value, self.embed_dim, self.num_heads,
            self.in_proj_weight, self.in_proj_bias,
            self.bias_k, self.bias_v, self.add_zero_attn,
            self.dropout, self.out_proj.weight, self.out_proj.bias,
            training=False,
            key_padding_mask=None, need_weights=False,
            attn_mask=None, average_attn_weights=True)

        return attn_output, attn_output_weights


class ResidualAttentionBlockCustom(nn.Module):
    def __init__(self):
        super().__init__()
